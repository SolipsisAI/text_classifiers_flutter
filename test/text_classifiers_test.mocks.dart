// Mocks generated by Mockito 5.3.2 from annotations
// in text_classifiers/test/text_classifiers_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tflite_flutter/src/interpreter.dart' as _i3;
import 'package:tflite_flutter/src/tensor.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTensor_0 extends _i1.SmartFake implements _i2.Tensor {
  _FakeTensor_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Interpreter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterpreter extends _i1.Mock implements _i3.Interpreter {
  MockInterpreter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get lastNativeInferenceDurationMicroSeconds => (super.noSuchMethod(
        Invocation.getter(#lastNativeInferenceDurationMicroSeconds),
        returnValue: 0,
      ) as int);
  @override
  int get address => (super.noSuchMethod(
        Invocation.getter(#address),
        returnValue: 0,
      ) as int);
  @override
  bool get isAllocated => (super.noSuchMethod(
        Invocation.getter(#isAllocated),
        returnValue: false,
      ) as bool);
  @override
  bool get isDeleted => (super.noSuchMethod(
        Invocation.getter(#isDeleted),
        returnValue: false,
      ) as bool);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void allocateTensors() => super.noSuchMethod(
        Invocation.method(
          #allocateTensors,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void invoke() => super.noSuchMethod(
        Invocation.method(
          #invoke,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void run(
    Object? input,
    Object? output,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #run,
          [
            input,
            output,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void runForMultipleInputs(
    List<Object>? inputs,
    Map<int, Object>? outputs,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #runForMultipleInputs,
          [
            inputs,
            outputs,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i2.Tensor> getInputTensors() => (super.noSuchMethod(
        Invocation.method(
          #getInputTensors,
          [],
        ),
        returnValue: <_i2.Tensor>[],
      ) as List<_i2.Tensor>);
  @override
  List<_i2.Tensor> getOutputTensors() => (super.noSuchMethod(
        Invocation.method(
          #getOutputTensors,
          [],
        ),
        returnValue: <_i2.Tensor>[],
      ) as List<_i2.Tensor>);
  @override
  void resizeInputTensor(
    int? tensorIndex,
    List<int>? shape,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #resizeInputTensor,
          [
            tensorIndex,
            shape,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Tensor getInputTensor(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getInputTensor,
          [index],
        ),
        returnValue: _FakeTensor_0(
          this,
          Invocation.method(
            #getInputTensor,
            [index],
          ),
        ),
      ) as _i2.Tensor);
  @override
  _i2.Tensor getOutputTensor(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getOutputTensor,
          [index],
        ),
        returnValue: _FakeTensor_0(
          this,
          Invocation.method(
            #getOutputTensor,
            [index],
          ),
        ),
      ) as _i2.Tensor);
  @override
  int getInputIndex(String? opName) => (super.noSuchMethod(
        Invocation.method(
          #getInputIndex,
          [opName],
        ),
        returnValue: 0,
      ) as int);
  @override
  int getOutputIndex(String? opName) => (super.noSuchMethod(
        Invocation.method(
          #getOutputIndex,
          [opName],
        ),
        returnValue: 0,
      ) as int);
}
